[
	{ "keys": ["ctrl+alt+j"],           "command": "journal"},
	{ "keys": ["ctrl+j"],               "command": "join_lines" },
	{ "keys": ["ctrl+k", "ctrl+space"], "command": "expand_selection", "args": {"to": "scope"} },
	{ "keys": ["ctrl+alt++shift+o"],    "command": "open_url" },
	{ "keys": ["ctrl+alt+t"],           "command": "open_terminal" },
	{ "keys": ["ctrl+shift+alt+t"],     "command": "open_terminal_project_folder" },
	{ "keys": ["shift+ctrl+alt+n"],     "command": "advanced_new_file"},

	// Asterisk, underscore and backtick wrapping
	{ "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*${0:$SELECTION}*"}, "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
		{ "keys": ["_"], "command": "insert_snippet", "args": {"contents": "_${0:$SELECTION}_"}, "context":
			[
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
			]
	},
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},

	// Auto-pair asterisks in Markdown
	{ "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*$0*"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "(^$)|[\\*a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true }
		]
	},
	{ "keys": ["*"], "command": "insert_snippet", "args": {"contents": "*${0:$SELECTION}*"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
		]
	},
	{ "keys": ["*"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "text.html.markdown", "match_all": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^\\*", "match_all": true }
		]
	},

	// Tab in and out of auto-pairs
	{ "keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true },
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "[[:space:]]*", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^[\"'\\)\\}\\]\\*_]", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "has_next_field", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["tab"], "command": "move", "args": {"by": "words", "forward": true}, "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true},
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "[[:space:]]*", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^[.,:;]", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "has_next_field", "operator": "equal", "operand": false }
		]
	},
	{ "keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false },
			{ "key": "following_text", "operator": "regex_contains", "operand": "[\\*_\\]\\)\\}\"']", "match_all": true }
		]
	},
	{ "keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true},
			{ "key": "selector", "operator": "equal", "operand": "text.tex.latex", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_match", "operand": "[[:space:]]*", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^[$]", "match_all": true },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "has_next_field", "operator": "equal", "operand": false }
		]
	}
]
